@page "/todos"

<nav class="navbar navbar-light bg-light justify-content-between">
    <h1 class="navbar-brand mb-0 h1">Todos</h1>
    <button class="btn btn-primary" type="button" @onclick="OpenAddTodoDialog">
        <span class="oi oi-plus" /> Add
    </button>
</nav>
<ul class="nav nav-tabs">
    <li class="nav-item ">
        <a class='nav-link btn @(tabFilter == "All" ? "active" : "")' @onclick='()=>TabFilter("All")'>All</a>
    </li>
    <li class="nav-item">
        <a class='nav-link btn @(tabFilter == "Due" ? "active" : "")' @onclick='()=>TabFilter("Due")'>Due</a>
    </li>
    <li class="nav-item">
        <a class='nav-link btn @(tabFilter == "Done" ? "active" : "")' @onclick='()=>TabFilter("Done")'>Done</a>
    </li>
</ul>

<table class="table">
    <thead>
        <tr>
            <th>
                <div class="d-flex">
                    Status
                    <a class='btn text-@(sortBy == "status" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                        @onclick='()=>onSortBy("status")'>
                        <span class='oi oi-sort-@(sortBy == "status" ? sortDirection : "ascending")'
                            />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    <input type="search" class="form-control search" placeholder="Search" @oninput="SearchTaskName" />
                    <a class='btn text-@(sortBy == "taskName" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                        @onclick='()=>onSortBy("taskName")'>
                        <span class='oi oi-sort-@(sortBy == "taskName" ? sortDirection : "ascending")'
                            />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Due Date
                    <a class='btn text-@(sortBy == "dueDate" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                        @onclick='()=>onSortBy("dueDate")'>
                        <span class='oi oi-sort-@(sortBy == "dueDate" ? sortDirection : "ascending")'
                            />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Created At
                    <a class='btn text-@(sortBy == "createdAt" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                        @onclick='()=>onSortBy("createdAt")'>
                        <span class='oi oi-sort-@(sortBy == "createdAt" ? sortDirection : "ascending")'
                            />
                    </a>
                </div>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @{
            IEnumerable<TodoItem> todoList = todos;
            if (sortBy == "status")
            {
                todoList = sortDirection == "ascending" ? todoList.OrderBy(t => t.IsDone) : todoList.OrderByDescending(t =>
                t.IsDone);
            }
            else if (sortBy == "taskName")
            {
                todoList = sortDirection == "ascending" ? todoList.OrderBy(t => t.TaskName) : todoList.OrderByDescending(t =>
                t.TaskName);
            }
            else if (sortBy == "dueDate")
            {
                todoList = sortDirection == "ascending" ? todoList.OrderBy(t => t.DueDate) : todoList.OrderByDescending(t =>
                t.DueDate);
            }
            else if (sortBy == "createdAt")
            {
                todoList = sortDirection == "ascending" ? todoList.OrderBy(t => t.CreatedAt) : todoList.OrderByDescending(t =>
                t.CreatedAt);
            }

            if (tabFilter == "Due")
            {
                todoList = todoList.Where(t => !t.IsDone);
            }
            else if (tabFilter == "Done")
            {
                todoList = todoList.Where(t => t.IsDone);
            }

            foreach (var todoItem in todoList)
            {
                <tr>
                    <td>
                        <div class="form-check">
                            <input class="form-check-input me-0" type="checkbox" checked="@todoItem.IsDone"
                            @onchange='()=>ToggleDone(todoItem)' />
                        </div>
                    </td>
                    <td class='@(todoItem.IsDone ? "text-decoration-line-through" : "")'>@todoItem.TaskName</td>
                    <td>
                        @{
                            bool isToday = !todoItem.IsDone && todoItem.DueDate == DateTime.Today;
                            bool isOlder = !todoItem.IsDone && todoItem.DueDate < DateTime.Today;
                            <p class='small mb-0 @(isToday ? "text-warning" : isOlder ? "text-danger" : "")'>
                                @if (isToday || isOlder)
                                {
                                    <span class="oi oi-warning mr-3" />
                                }
                                @todoItem.DueDate.ToString("MMM dd, yyyy")
                            </p>
                        }
                </td>
                <td>
                    <p class="small mb-0">
                        @todoItem.CreatedAt.ToString("MMM dd, yyyy h:mm tt")
                    </p>
                </td>
                <td>
                    <button disabled="@todoItem.IsDone" class="btn btn-outline-secondary" type="button"
                        @onclick="()=>OpenEditTodoDialog(todoItem)">
                        <span class="oi oi-pencil" /> Edit
                    </button>
                    <button class="btn btn-outline-danger" type="button" @onclick="()=>OpenDeleteTodoDialog(todoItem)">
                        <span class="oi oi-delete" /> Delete
                    </button>
                </td>
            </tr>
            }
        }
    </tbody>
</table>

@if (showEditTodoDialog)
{
    <ModalDialog Title="@dialogTitle" OnClose="@OnEditTodoDialogClose" OkLabel="@dialogOkLabel">
    <div class="form-floating">
        <input id="taskName" type="text" class="form-control" @bind="todoModel.TaskName" placeholder="Task Name" />
        <label for="taskName">Task Name</label>
    </div>
    <div class="form-floating">
        <label for="dueDate">Due Date</label>
        <input id="dueDate" type="date" min='@DateTime.Today.ToString("yyyy-MM-dd")'
            value='@todoModel.DueDate.ToString("yyyy-MM-dd")' @onchange="updateDate" class="form-control text-left"
            placeholder="Due Date">
    </div>

    @if (!string.IsNullOrEmpty(editTodoErrorMessage))
        {
            <div class="alert alert-danger" role="alert">@editTodoErrorMessage</div>
        }
        </ModalDialog>
}

@if (showDeleteTodoDialog)
{
    <ModalDialog Title="Delete Todo" OnClose="@OnDeleteTodoDialogClose" OkLabel="Confirm">
    <p>Are you sure you want to delete <strong>@deleteTodo.TaskName</strong> task?</p>
    @if (!string.IsNullOrEmpty(deleteTodoErrorMessage))
        {
            <div class="alert alert-danger" role="alert">@deleteTodoErrorMessage</div>
        }
        </ModalDialog>
}

@code {
    [CascadingParameter]
    public GlobalState state { get; set; }
    private bool showEditTodoDialog { get; set; }
    private bool showDeleteTodoDialog { get; set; }
    private List<TodoItem> todos { get; set; }
    private TodoItem deleteTodo { get; set; }
    private string dialogTitle { get; set; }
    private string dialogOkLabel { get; set; }
    private string editTodoErrorMessage { get; set; }
    private string deleteTodoErrorMessage { get; set; }
    private TodoItem todoModel { get; set; }
    private string tabFilter = "All";
    private string sortBy = "dueDate";
    private string sortDirection = "ascending";

    protected override void OnInitialized()
    {
        todos = TodosService.GetAll(state.CurrentUser.Id);
    }

    private void onSortBy(string sortByName)
    {
        if (sortBy == sortByName)
        {
            sortDirection = sortDirection == "ascending" ? "descending" : "ascending";
        }
        else
        {
            sortBy = sortByName;
            sortDirection = "ascending";
        }
    }

    private void OpenAddTodoDialog()
    {
        dialogTitle = "Add Todo";
        dialogOkLabel = "Add";
        todoModel = new TodoItem();
        todoModel.Id = Guid.Empty;
        showEditTodoDialog = true;
    }

    private void SearchTaskName(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString();
        if (!string.IsNullOrEmpty(searchTerm) && searchTerm.Length > 2)
        {
            todos = TodosService.GetAll(state.CurrentUser.Id).Where(t =>
            t.TaskName.ToLower().Contains(searchTerm.ToLower())).ToList();
        }
        else
        {
            todos = TodosService.GetAll(state.CurrentUser.Id);
        }
    }

    private void OpenEditTodoDialog(TodoItem editTodo)
    {
        dialogTitle = "Edit Todo";
        dialogOkLabel = "Save";

        todoModel = editTodo;

        showEditTodoDialog = true;
    }

    private void OpenDeleteTodoDialog(TodoItem todoItem)
    {
        deleteTodo = todoItem;
        showDeleteTodoDialog = true;
    }

    private void updateDate(ChangeEventArgs e)
    {
        todoModel.DueDate = DateTime.Parse(e.Value.ToString());
    }
    private void OnEditTodoDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            showEditTodoDialog = false;
        }
        else
        {
            try
            {
                editTodoErrorMessage = "";
                if (todoModel.Id == Guid.Empty)
                {
                    todos = TodosService.Create(state.CurrentUser.Id, todoModel.TaskName, todoModel.DueDate);
                }
                else
                {
                    todos = TodosService.Update(state.CurrentUser.Id, todoModel.Id, todoModel.TaskName, todoModel.DueDate,
                    todoModel.IsDone);
                }
                showEditTodoDialog = false;
            }
            catch (Exception e)
            {
                editTodoErrorMessage = e.Message;
            }
        }
    }
    private void OnDeleteTodoDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            showDeleteTodoDialog = false;
            deleteTodo = null;
        }
        else
        {
            try
            {
                deleteTodoErrorMessage = "";
                todos = TodosService.Delete(state.CurrentUser.Id, deleteTodo.Id);
                showDeleteTodoDialog = false;
                deleteTodo = null;
            }
            catch (Exception e)
            {
                deleteTodoErrorMessage = e.Message;
            }
        }
    }
    private void TabFilter(string status)
    {
        tabFilter = status;
    }
    private void ToggleDone(TodoItem todo)
    {
        todo.IsDone = !todo.IsDone;
        todos = TodosService.Update(state.CurrentUser.Id, todo.Id, todo.TaskName, todo.DueDate, todo.IsDone);
    }
}